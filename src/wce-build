#!/usr/bin/env node

const program = require('commander');
const path = require('path');
const spawn = require('cross-spawn-async');
const chalk = require('chalk');
const fs = require('fs-extra');
const babelConfig = require('../babel-config');
const paths = require('../default-paths');
const _ = require('lodash');
const utils = require('./utils');

program
  .option('-v, --verbose', 'log built files')
  .option('-w, --watch', 'copy assets only once, build and watch for changes')
  .option('-b, --bin', 'specify a bin prefix (lerna)')
  .parse(process.argv);

const binPath = program.bin ? path.join(program.bin, paths.bin) : paths.bin;
const babelCmd = path.join(binPath, 'babel');
const babelArgs = [
  paths.src,
  '--out-dir',
  paths.lib,
  '--presets',
  babelConfig.presets.join(','),
  '--plugins',
  _.initial(babelConfig.plugins).join(',')
];

if (program.watch) babelArgs.push('--watch');

process.stdout.write(chalk.yellow('---build---', '\n'));
process.stdout.write(chalk.blue('babel', babelArgs.join(' '), '\n'));

try {
  process.stdout.write(chalk.magenta('copy assets (not watched)', '\n'));
  fs.copySync(path.join(paths.src, 'assets'), path.join(paths.lib, 'assets'));
} catch(err) {
  process.stdout.write(chalk.red('cp', 'unable to cp assets', '\n'));
}

var babel = spawn(babelCmd, babelArgs);
if (program.watch) {
  utils.killHelp();
  process.stdin.on('readable', () => {
    var chunk = process.stdin.read();
    if (!chunk) return;
    if (chunk.toString() === 'kill\n') {
      utils.kill(babel.pid);
    } else {
      process.stdout.write(chalk.red('unknown command: ', chunk));
      utils.killHelp();
    }
  });
}

if (program.verbose) babel.stdout.on('data', data => process.stdout.write(data.toString()));
babel.stderr.on('data', data => process.stdout.write(chalk.red(data.toString(), '\n')));
babel.on('close', code => process.stdout.write(chalk.yellow('---build done---', '\n')));
