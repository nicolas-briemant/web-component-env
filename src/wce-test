#!/usr/bin/env node

const program = require('commander');
const path = require('path');
const spawn = require('cross-spawn-async');
const chalk = require('chalk');
const paths = require('../default-paths');
const fs = require('fs');

const TEST = 'test/**/*.js*';
const defaultPattern = [TEST];

program
  .option('-p, --pattern [file|dir|glob]*', 'test a specific pattern')
  .option('-b, --bin', 'specify a bin prefix (lerna)')
  .parse(process.argv);

const wcePath = path.dirname(__dirname);
const mochaBabelHookPath = path.join(wcePath, 'mocha-babel-hook');
const binPath = program.bin ? path.join(program.bin, paths.bin) : paths.bin;
const nycCmd = path.join(binPath, 'nyc');
const mochaCmd = path.join(binPath, '_mocha');
const pattern = program.pattern ? [program.pattern] : defaultPattern;
const nycArgs = [
  '--require', mochaBabelHookPath,
  '--include', 'src',
  '--all',
  '--reporter', 'text'
];
const mochaArgs = [
  pattern,
  '--colors',
  '--recursive',
  '--check-leaks'
];
const nycCmdArgs = [].concat(nycArgs, mochaCmd, mochaArgs);
const nycArgsLabel = ['--require mochaBabelHookPath'].concat(nycArgs.slice(2)).join(' ');

process.stdout.write(chalk.yellow('---testing---', '\n'));
process.stdout.write(chalk.blue('nyc', nycArgsLabel, '\n'));
process.stdout.write(chalk.blue('mocha', mochaArgs.join(' '), '\n'));
try {
  fs.accessSync('test', fs.F_OK);
  var test = spawn(nycCmd, nycCmdArgs);
  test.stdout.on('data', data => process.stdout.write(data.toString()));
  test.stderr.on('data', data => process.stdout.write(chalk.red(data.toString(), '\n')));
  test.on('close', code => process.stdout.write(chalk.yellow('---testing done---', '\n')));
} catch (err) {
  process.stdout.write(chalk.red('no test to run', '\n'));
  process.stdout.write(chalk.yellow('---testing done---', '\n'));
}

