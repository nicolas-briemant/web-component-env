#!/usr/bin/env node

const program = require('commander');
const path = require('path');
const childProcess = require('child_process');
const chalk = require('chalk');
const spawn = require('cross-spawn');
const paths = require('../default-paths');
const fs = require('fs-extra');
const utils = require('./utils');

const clean = () => {
  spawn.sync(
    path.join(path.dirname(__dirname), 'src/wce-clean'),
    ['--pattern', paths.build],
    { stdio: 'inherit' }
  );
};

program
  .option('-h, --host <n>', 'set the host')
  .option('-p, --port <n>', 'set the port', parseInt)
  .option('-b, --bin', 'specify a bin prefix (lerna)')
  .parse(process.argv);

process.env.PORT = program.port || 3000;
process.env.HOST = program.host || '0.0.0.0';

const wcePath = path.dirname(__dirname);
const binPath = program.bin ? path.join(program.bin, paths.bin) : paths.bin;
const webpackDevServerConfig = path.join(wcePath, 'webpack-config-dev.js');
const webpackDevServerCmd = path.join(binPath, 'webpack-dev-server');

process.stdout.write(chalk.yellow('---starting dev env---', '\n'));
clean();
fs.copySync(path.join(wcePath, 'index.html'), path.join('build', 'index.html'));

utils.killHelp();
var webpackDevServer = childProcess.exec([
  webpackDevServerCmd,
  '--config', webpackDevServerConfig
].join(' '));

process.stdin.on('readable', () => {
  var chunk = process.stdin.read();
  if (!chunk) return;
  if (chunk.toString() === 'kill\n') {
    clean();
    utils.kill(webpackDevServer.pid);
  } else {
    process.stdout.write(chalk.red('unknown command: ', chunk));
    killHelp();
  }
});
webpackDevServer.stdout.on('data', data => process.stdout.write(data.toString()));
webpackDevServer.stderr.on('data', data => process.stdout.write(chalk.red(data.toString(), '\n')));
